import os
import random
import re
import sys


DAMPING = 0.85
SAMPLES = 10000


def main():
    if len(sys.argv) != 2:
        sys.exit("Usage: python pagerank.py corpus")
    corpus = crawl(sys.argv[1])
    ranks = sample_pagerank(corpus, DAMPING, SAMPLES)
    print(f"PageRank Results from Sampling (n = {SAMPLES})")
    for page in sorted(ranks):
        print(f"  {page}: {ranks[page]:.4f}")
        
    ranks = iterate_pagerank(corpus, DAMPING)
    print(f"PageRank Results from Iteration")
    for page in sorted(ranks):
        print(f"  {page}: {ranks[page]:.4f}")



def crawl(directory):
    """
    Parse a directory of HTML pages and check for links to other pages.
    Return a dictionary where each key is a page, and values are
    a list of all other pages in the corpus that are linked to by the page.
    """
    pages = dict()

    # Extract all links from HTML files
    for filename in os.listdir(directory):
        if not filename.endswith(".html"):
            continue
        with open(os.path.join(directory, filename)) as f:
            contents = f.read()
            links = re.findall(r"<a\s+(?:[^>]*?)href=\"([^\"]*)\"", contents)
            pages[filename] = set(links) - {filename}

    # Only include links to other pages in the corpus
    for filename in pages:
        pages[filename] = set(
            link for link in pages[filename]
            if link in pages
        )

    return pages


def transition_model(corpus, page, damping_factor):
    """
    Return a probability distribution over which page to visit next,
    given a current page.

    With probability `damping_factor`, choose a link at random
    linked to by `page`. With probability `1 - damping_factor`, choose
    a link at random chosen from all pages in the corpus.
    """
    # corpus, dictionary, page --> all the linked pages to the current page
    # page, string, current page
    # return a dictionary, key = each page in the corpus, value = probably of being visited next
    # the sum of these values should be equal to 1.
    # no links, then randomly choose among all the pages

    visit_prob = {}
    numhtmls = len(corpus)
    numlinks = len(corpus[page])
    # if there are no links, all have the same prob 1/n
    if numlinks == 0:
        for html in corpus:
            visit_prob[html] = 1 / numhtmls 
    # if there are links, need to distinguish html in the link and not in the link
    else:
        for html in corpus:
            if html in corpus[page]:
                visit_prob[html] = (1 - damping_factor) / numhtmls + damping_factor / numlinks
            else:
                visit_prob[html] = (1 - damping_factor) / numhtmls 
    return visit_prob


def sample_pagerank(corpus, damping_factor, n):
    """
    Return PageRank values for each page by sampling `n` pages
    according to transition model, starting with a page at random.

    Return a dictionary where keys are page names, and values are
    their estimated PageRank value (a value between 0 and 1). All
    PageRank values should sum to 1.
    """
    # n, number of samples that should be generated
    # return a dictionary, key is each page, value is PageRank, proportion of all the samples that corresponded to that page
    # The sum of the values should be equal to 1.
    # first sample is generated by randomly choosing a page. 
    # The next sample should be generated based on the previous sample's transition model. 

    states = []
    allpages = list(corpus)
    
    i = 0
    while i < n:
        if i == 0: 
            page = random.choice(allpages)
        else:
        # random.choices() return a list, however, page should be a string in order to pass it to the 
        # transition_model()
            page = random.choices(list(visit_prob), weights = list(visit_prob.values()), k = 1)[0]
        visit_prob = transition_model(corpus, page, damping_factor)
        states.append(page)
        i += 1


    pagerank = {}
    for page in allpages:
        if page in states:
            pagerank[page] = states.count(page) / n
        else:
            pagerank[page] = 0
    return pagerank


def iterate_pagerank(corpus, damping_factor):
    """
    Return PageRank values for each page by iteratively updating
    PageRank values until convergence.

    Return a dictionary where keys are page names, and values are
    their estimated PageRank value (a value between 0 and 1). All
    PageRank values should sum to 1.
    """
    # return a dictionary, page and its porb. 
    # random assgin at the beginning
    # update page value until change is smaller than 0.001.

    
    numhtmls = len(corpus)
    allpages = list(corpus)
    pagerank = dict.fromkeys(allpages, 1 / numhtmls)
    PageRankChange = True
    while PageRankChange:
        PageRankChange = False
        pagerank_copy = pagerank.copy()
        for html in corpus:
            pagerank[html] = (1 - damping_factor) / numhtmls
            for other_html in corpus:
                if other_html != html and len(corpus[other_html]) != 0 and html in corpus[other_html]:
                    pagerank[html] += pagerank_copy[other_html] / len(corpus[other_html])
        
        total_prob = sum(pagerank.values())
        for html in pagerank:
            pagerank[html] = pagerank[html] / total_prob
            if abs(pagerank[html] - pagerank_copy[html]) >= 0.001:
                PageRankChange = True
    return pagerank


if __name__ == "__main__":
    main()
